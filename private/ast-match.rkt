#lang racket
(require "utils.rkt" "macro-helper.rkt" "ast-def.rkt" syntax/parse
         (for-template racket))

(provide (struct-out match-decorator::context)
         (struct-out match-decorator::gen-clause)
         match-decorator/c
         match-repr/c)

;; match decorators are now implemented in a unhygienic way, make it hygienic need a lot of efforts
(define match-repr/c (hash/c symbol? syntax?))
;; context: pattern -> tagged -> body -> transformed body
(struct/contract match-decorator::context ([transformer (-> syntax? (list/c symbol? tagged?) syntax? syntax?)])
                 #:transparent)
;; gen-clause: listof tagged -> generated clauses
(struct/contract match-decorator::gen-clause ([transformer (-> (listof (list/c symbol? tagged?)) match-repr/c)])
                 #:transparent)

(define match-decorator/c (or/c match-decorator::context?
                                match-decorator::gen-clause?))


(define/contract (merge-match match1 match2)
  (-> match-repr/c match-repr/c match-repr/c)
  (for/fold ([match-repr match1])
            ([(tag match-clause) (in-hash match2)])
    (when (hash-has-key? match-repr tag)
      (raise-syntax-error (error-who) "duplicate match pattern generated by a match decorator" (error-stx)))
    (hash-set match-repr tag match-clause)))

(define/contract (apply-decorator lang-meta decorator match-repr)
  (-> language-meta? match-decorator/c match-repr/c match-repr/c)
  (define all-tags (list->seteq (language-meta::tags lang-meta)))
  (define resolve (curry language-meta::resolve lang-meta))
  (define (wrap-bodies bodies)
    (syntax-parse bodies
      [(a) #'a]
      [(a ...) #'(let () a ...)]))
  (match decorator
    [(match-decorator::context tfer)
     (for/hasheq ([(tag clause) (in-hash match-repr)])
       (values tag (syntax-parse clause
                     [((match-tag field ...) bodies ...)
                      #`((match-tag field ...) #,(tfer #'(match-tag field ...)
                                                       (list tag (resolve tag))
                                                       (wrap-bodies #'(bodies ...))))])))]
    [(match-decorator::gen-clause tfer)
     (define seen-tags (for/seteq ([tag (in-hash-keys match-repr)]) tag))
     (define tag+tagged (for/list ([tag (in-set (set-subtract all-tags seen-tags))])
                          (list tag (resolve tag))))
     (merge-match match-repr (tfer tag+tagged))]))

(: match-lang-transformer (-> syntax? syntax?))
(define (match-lang-transformer stx)
    (parameterize ([error-who 'match-lang]
                   [error-stx stx])
      (syntax-parse stx
        [(_ lang-id:id val (~optional (~seq #:decorators (decorator-clauses ...))
                                      #:defaults ([(decorator-clauses 1) (list)])) [(tag:id field:id ...) bodies ...] ...)
         (define lang-meta (syntax-local-value #'lang-id))
         (define resolve (curry language-meta::resolve lang-meta))
         (define resolve-id (curry language-meta::resolve-id lang-meta))
         (define apply-decorator1 (curry apply-decorator lang-meta))
         
         (check-duplicate-tags (syntax->datum #'(tag ...)))
       
         (define match-expr (for/hasheq ([clause (syntax->list #'([(tag field ...) bodies ...] ...))])
                              (syntax-parse clause
                                [((tag:id field:id ...) bodies ...) (values (syntax-e #'tag)
                                                                            #`((#,(resolve-id #'tag) field ...) bodies ...))])))
         (define processed-match-expr
           (for*/fold ([match-expr match-expr])
                      ([decorator-clause (syntax->list #'(decorator-clauses ...))]
                       [decorator (expand-macro decorator-clause)])
             (parameterize ([error-stx decorator-clause])
               (apply-decorator1 decorator match-expr))))
         ;;exhaustiveness check
         (check-tag-complete lang-meta (hash-keys processed-match-expr))
         
         (define match-clauses (for/list ([clause (in-hash-values processed-match-expr)])
                                 clause))
                
         (dbg #`(match val
                  #,@match-clauses))])))

